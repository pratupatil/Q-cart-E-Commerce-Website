[{"C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\index.js":"1","C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\App.js":"2","C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\theme.js":"3","C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\components\\Login.js":"4","C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\components\\Products.js":"5","C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\components\\Checkout.js":"6","C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\components\\Register.js":"7","C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\components\\Thanks.js":"8","C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\components\\Footer.js":"9","C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\components\\Header.js":"10","C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\components\\ProductCard.js":"11","C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\components\\Cart.js":"12","C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\components\\AddNewAddress.js":"13"},{"size":715,"mtime":1701462812000,"results":"14","hashOfConfig":"15"},{"size":915,"mtime":1701462812000,"results":"16","hashOfConfig":"15"},{"size":290,"mtime":1701462812000,"results":"17","hashOfConfig":"15"},{"size":5813,"mtime":1701462812000,"results":"18","hashOfConfig":"15"},{"size":10413,"mtime":1701462812000,"results":"19","hashOfConfig":"15"},{"size":11761,"mtime":1716815116114,"results":"20","hashOfConfig":"15"},{"size":6709,"mtime":1701462812000,"results":"21","hashOfConfig":"15"},{"size":1133,"mtime":1701462812000,"results":"22","hashOfConfig":"15"},{"size":451,"mtime":1701462812000,"results":"23","hashOfConfig":"15"},{"size":2729,"mtime":1701462812000,"results":"24","hashOfConfig":"15"},{"size":1129,"mtime":1701462812000,"results":"25","hashOfConfig":"15"},{"size":9485,"mtime":1701462812000,"results":"26","hashOfConfig":"15"},{"size":2336,"mtime":1716799467790,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5gxu26",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\index.js",[],"C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\App.js",["57","58"],"import Register from \"./components/Register\";\nimport ipConfig from \"./ipConfig.json\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Login from \"./components/Login\";\nimport Products from \"./components/Products\";\nimport { Stack } from \"@mui/system\";\nimport Checkout from \"./components/Checkout\"\nimport Thanks from \"./components/Thanks\"\n\nexport const config = {\n  endpoint: `https://qkart-frontend-dgtg.onrender.com/api/v1`,\n};\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* TODO: CRIO_TASK_MODULE_LOGIN - To add configure routes and their mapping */}\n      <Switch>\n        <Route exact path=\"/\" component={Products} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/register\" component={Register} />\n        <Route path='/checkout' component={Checkout}/>\n        <Route path='/thanks' component={Thanks}/>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\theme.js",[],"C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\components\\Login.js",[],"C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\components\\Products.js",["59","60","61","62","63"],"import { Search, SentimentDissatisfied } from \"@mui/icons-material\";\nimport {\n  CircularProgress,\n  Grid,\n  InputAdornment,\n  TextField,\n  Box,\n  Typography,\n} from \"@mui/material\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport SentimentNeutralIcon from \"@mui/icons-material/SentimentNeutral\";\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { config } from \"../App\";\nimport ProductCard from \"./ProductCard\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport Cart from \"./Cart\";\nimport { generateCartItemsFrom } from \"./Cart\";\nimport \"./Products.css\";\n\nconst Products = () => {\n  const history = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const [isLoading, setIsLoading] = useState(true);\n\n \n  const [debounce, setDebounce] = useState(0);\n  const [productsData, setProductsData] = useState([]);\n \n  const [cartData, setCartData] = useState([]);\n  const [items, setItems] = useState([]);\n \n  const username = localStorage.getItem(\"username\");\n  const token = localStorage.getItem(\"token\");\n  \n  const performAPICall = async () => {\n    try {\n      const response = await axios.get(`${config.endpoint}/products`);\n      setProductsData(response.data);\n      setIsLoading(false);\n      \n      return response.data;\n    } catch (err) {\n      setIsLoading(false);\n      enqueueSnackbar(err.response.data.message, { variant: \"error\" });\n      console.log(err.response);\n    }\n  };\n\n  useEffect(() => {\n    (async function () {\n      const dataFromProductAPI = await performAPICall();\n      const dataFromCartAPI = await fetchCart(token);\n      const cartDetails = await generateCartItemsFrom(\n        dataFromCartAPI,\n        dataFromProductAPI\n      );\n      setItems(cartDetails);\n    })();\n  }, []);\n\n \n\n  const performSearch = async (e) => {\n    try {\n      const url = `${config.endpoint}/products/search?value=${e.target.value}`;\n      const response = await axios.get(url);\n      console.log(response.data);\n      setProductsData(response.data);\n    } catch (err) {\n      if (err.response.status === 404) {\n        setProductsData(err.response.data);\n        console.log(err.response);\n      }\n    }\n  };\n\n  /**\n   * Definition for debounce handler\n   * With debounce, this is the function to be called whenever the user types text in the searchbar field\n   *\n   * @param {{ target: { value: string } }} event\n   *    JS event object emitted from the search input field\n   *\n   * @param {NodeJS.Timeout} debounceTimeout\n   *    Timer id set for the previous debounce call\n   *\n   */\n\n  const debounceSearch = (event, debounceTimeout) => {\n    let timeout;\n\n    if (debounce) {\n      clearTimeout(debounce);\n    }\n\n    timeout = setTimeout(() => performSearch(event), debounceTimeout);\n    setDebounce(timeout);\n  };\n\n  /**\n   * Perform the API call to fetch the user's cart and return the response\n   *\n   * @param {string} token - Authentication token returned on login\n   *\n   * @returns { Array.<{ productId: string, qty: number }> | null }\n   *    The response JSON object\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"productId\": \"KCRwjF7lN97HnEaY\",\n   *          \"qty\": 3\n   *      },\n   *      {\n   *          \"productId\": \"BW0jAAeDJmlZCF8i\",\n   *          \"qty\": 1\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */\n\n  const fetchCart = async (token) => {\n    if (!token) return;\n    const url = `${config.endpoint}/cart`;\n    try {\n      // TODO: CRIO_TASK_MODULE_CART - Pass Bearer token inside \"Authorization\" header to get data from \"GET /cart\" API and return the response data\n      const response = await axios.get(url, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      setCartData(response.data);\n     \n      return response.data;\n      \n    } catch (e) {\n      if (e.response && e.response.status === 400) {\n        enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n      } else {\n        enqueueSnackbar(\n          \"Could not fetch cart details. Check that the backend is running, reachable and returns valid JSON.\",\n          {\n            variant: \"error\",\n          }\n        );\n      }\n      return null;\n    }\n  };\n\n  // TODO: CRIO_TASK_MODULE_CART - Return if a product already exists in the cart\n  /**\n   * Return if a product already is present in the cart\n   *\n   * @param { Array.<{ productId: String, quantity: Number }> } items\n   *    Array of objects with productId and quantity of products in cart\n   * @param { String } productId\n   *    Id of a product to be checked\n   *\n   * @returns { Boolean }\n   *    Whether a product of given \"productId\" exists in the \"items\" array\n   *\n   */\n  const isItemInCart = (items, productId) => {\n    return items.find((item) => {\n      return item.productId === productId;\n    });\n  };\n\n  /**\n   * Perform the API call to add or update items in the user's cart and update local cart data to display the latest cart\n   *\n   * @param {string} token\n   *    Authentication token returned on login\n   * @param { Array.<{ productId: String, quantity: Number }> } items\n   *    Array of objects with productId and quantity of products in cart\n   * @param { Array.<Product> } products\n   *    Array of objects with complete data on all available products\n   * @param {string} productId\n   *    ID of the product that is to be added or updated in cart\n   * @param {number} qty\n   *    How many of the product should be in the cart\n   * @param {boolean} options\n   *    If this function was triggered from the product card's \"Add to Cart\" button\n   *\n   * Example for successful response from backend:\n   * HTTP 200 - Updated list of cart items\n   * [\n   *      {\n   *          \"productId\": \"KCRwjF7lN97HnEaY\",\n   *          \"qty\": 3\n   *      },\n   *      {\n   *          \"productId\": \"BW0jAAeDJmlZCF8i\",\n   *          \"qty\": 1\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 404 - On invalid productId\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Product doesn't exist\"\n   * }\n   */\n  const addToCart = async (\n    token,\n    items,\n    products,\n    productId,\n    qty,\n    options = { preventDuplicate: false }\n  ) => {\n    try {\n      if (!token) {\n        enqueueSnackbar(\"Login to add an item to the Cart\", {\n          variant: \"error\",\n        });\n        return;\n      }\n      if (options.preventDuplicate) {\n        if (isItemInCart(items, productId)) {\n          enqueueSnackbar(\n            \"Item already in cart. Use the cart sidebar to update quantity or remove item.\",\n            { variant: \"warning\" }\n          );\n          return;\n        }\n      }\n      const url = `${config.endpoint}/cart`;\n      const itemToBeAdded = {\n        productId,\n        qty,\n      };\n      const response = await axios.post(url, itemToBeAdded, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      \n      setCartData(response.data);\n      const cartDetails = await generateCartItemsFrom(\n        response.data,\n        productsData\n      );\n      setItems(cartDetails);\n    } catch (err) {\n      if (err.response && err.response.status === 400) {\n        enqueueSnackbar(\"Session has expired please login again!\", {\n          variant: \"error\",\n        });\n      }\n    }\n\n    \n  };\n\n  return (\n    <div>\n      <Header>\n        <Box className=\"search search-desktop\">\n          <TextField\n            fullWidth\n            variant=\"outlined\"\n            size=\"small\"\n            // value={value}\n            placeholder=\"Search for items/categories\"\n            InputProps={{\n              endAdornment: <SearchIcon color=\"primary\" />,\n            }}\n            onChange={(e) => debounceSearch(e, 500)}\n          />\n        </Box>\n      </Header>\n      <Box className=\"search-mobile\">\n        <TextField\n          fullWidth\n          variant=\"outlined\"\n          size=\"small\"\n          placeholder=\"Search for items/categories\"\n          InputProps={{\n            endAdornment: <SearchIcon color=\"primary\" />,\n          }}\n          onChange={(e) => debounceSearch(e, 500)}\n        />\n      </Box>\n      <Grid container>\n        <Grid item md={username ? 8 : 12} lg={username ? 9 : 12}>\n          <Grid item className=\"product-grid\">\n            <Box className=\"hero\">\n              <p className=\"hero-heading\">\n                India’s <span className=\"hero-highlight\">FASTEST DELIVERY</span>{\" \"}\n                to your door step\n              </p>\n            </Box>\n          </Grid>\n          {isLoading ? (\n            <Box className=\"loading\">\n              <CircularProgress />\n              <Typography variant=\"body2\">Loading Products...</Typography>\n            </Box>\n          ) : productsData.length !== 0 ? (\n            <Grid container rowSpacing={2.5} columnSpacing={2} my={2} px={2}>\n              {productsData.map((product) => (\n                <Grid item xs={6} md={3} key={product._id}>\n                  <ProductCard\n                    product={product}\n                    handleAddToCart={(id, qty) =>\n                      addToCart(token, cartData, productsData, id, qty, {\n                        preventDuplicate: true,\n                      })\n                    }\n                  />\n                </Grid>\n              ))}\n            </Grid>\n          ) : (\n            <Box className=\"loading\">\n              <SentimentNeutralIcon color=\"primary\" />\n              <Typography variant=\"body2\" color=\"textSecondary\" mt={1}>\n                No Products found\n              </Typography>\n            </Box>\n          )}\n        </Grid>\n\n        {username ? (\n          <Grid item xs={12} md={4} lg={3} className=\"cart-background\">\n            {/* {items && <Cart products={productsData} items={items} />} */}\n            <Cart\n              products={productsData}\n              items={items}\n              handleQuantity={(id, qty) =>\n                addToCart(token, cartData, productsData, id, qty)\n              }\n              // handleQuantity={addToCart}\n            />\n          </Grid>\n        ) : null}\n      </Grid>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default Products;\n","C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\components\\Checkout.js",["64","65","66"],"C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\components\\Register.js",[],"C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\components\\Thanks.js",[],"C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\components\\Footer.js",[],"C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\components\\Header.js",[],"C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\components\\ProductCard.js",[],"C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\components\\Cart.js",[],"C:\\Users\\patil\\Downloads\\Qkart_FrontEnd-main\\Qkart_FrontEnd-main\\src\\components\\AddNewAddress.js",["67","68"],"import React, { useState } from \"react\";\r\nimport { Button, TextField, Typography, Box } from \"@mui/material\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport axios from \"axios\";\r\nimport { config } from \"../App\";\r\n\r\nconst AddNewAddress = ({ token, addAddress }) => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [newAddress, setNewAddress] = useState({\r\n    value: \"\",\r\n    suggestions: [],\r\n  });\r\n\r\n  const handleInputChange = async (event) => {\r\n    const addressInput = event.target.value;\r\n  \r\n    try {\r\n      // Fetch address suggestions from Bing Maps API\r\n      const response = await axios.get(\r\n        `https://dev.virtualearth.net/REST/v1/Locations?query=${addressInput}&key=${\"AkCB7LU7IDWnxG6cMzetXbulcO8-MrGC8vvY4Fe9jj-0z0ExIQIHlmwbZ6OYKyBD\"}`\r\n      );\r\n      const suggestions = response.data.resourceSets[0].resources;\r\n      setNewAddress({ ...newAddress, value: addressInput, suggestions });\r\n    } catch (error) {\r\n      enqueueSnackbar(\"Error fetching address suggestions\", { variant: \"error\" });\r\n      console.error(\"Error fetching address suggestions:\", error);\r\n    }\r\n  };\r\n  \r\n\r\n  const handleAddressSelect = (selectedAddress) => {\r\n    setNewAddress({ ...newAddress, value: selectedAddress });\r\n  };\r\n\r\n  const handleAddAddress = async () => {\r\n    try {\r\n      // Handle adding the address\r\n      await addAddress(token, newAddress.value);\r\n      // Clear only the address input value, keep suggestions intact\r\n      setNewAddress({ ...newAddress, value: \"\" });\r\n      enqueueSnackbar(\"Address added successfully\", { variant: \"success\" });\r\n    } catch (error) {\r\n      enqueueSnackbar(\"Error adding address\", { variant: \"error\" });\r\n      console.error(\"Error adding address:\", error);\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"column\">\r\n      <TextField\r\n        label=\"Enter your complete address\"\r\n        value={newAddress.value}\r\n        onChange={handleInputChange}\r\n      />\r\n      <ul>\r\n        {newAddress.suggestions.map((suggestion) => (\r\n          <li key={suggestion.id} onClick={() => handleAddressSelect(suggestion.name)}>\r\n            {suggestion.name}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <Button variant=\"contained\" onClick={handleAddAddress}>\r\n        Add\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AddNewAddress;\r\n",{"ruleId":"69","severity":1,"message":"70","line":2,"column":8,"nodeType":"71","messageId":"72","endLine":2,"endColumn":16},{"ruleId":"69","severity":1,"message":"73","line":6,"column":10,"nodeType":"71","messageId":"72","endLine":6,"endColumn":15},{"ruleId":"69","severity":1,"message":"74","line":1,"column":10,"nodeType":"71","messageId":"72","endLine":1,"endColumn":16},{"ruleId":"69","severity":1,"message":"75","line":1,"column":18,"nodeType":"71","messageId":"72","endLine":1,"endColumn":39},{"ruleId":"69","severity":1,"message":"76","line":5,"column":3,"nodeType":"71","messageId":"72","endLine":5,"endColumn":17},{"ruleId":"69","severity":1,"message":"77","line":25,"column":9,"nodeType":"71","messageId":"72","endLine":25,"endColumn":16},{"ruleId":"78","severity":1,"message":"79","line":63,"column":6,"nodeType":"80","endLine":63,"endColumn":8,"suggestions":"81"},{"ruleId":"69","severity":1,"message":"82","line":20,"column":8,"nodeType":"71","messageId":"72","endLine":20,"endColumn":21},{"ruleId":"69","severity":1,"message":"83","line":244,"column":15,"nodeType":"71","messageId":"72","endLine":244,"endColumn":23},{"ruleId":"78","severity":1,"message":"84","line":278,"column":6,"nodeType":"80","endLine":278,"endColumn":8,"suggestions":"85"},{"ruleId":"69","severity":1,"message":"86","line":2,"column":29,"nodeType":"71","messageId":"72","endLine":2,"endColumn":39},{"ruleId":"69","severity":1,"message":"87","line":5,"column":10,"nodeType":"71","messageId":"72","endLine":5,"endColumn":16},"no-unused-vars","'ipConfig' is defined but never used.","Identifier","unusedVar","'Stack' is defined but never used.","'Search' is defined but never used.","'SentimentDissatisfied' is defined but never used.","'InputAdornment' is defined but never used.","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchCart', 'performAPICall', and 'token'. Either include them or remove the dependency array.","ArrayExpression",["88"],"'AddNewAddress' is defined but never used.","'response' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchCart', 'getAddresses', 'getProducts', and 'token'. Either include them or remove the dependency array.",["89"],"'Typography' is defined but never used.","'config' is defined but never used.",{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},"Update the dependencies array to be: [fetchCart, performAPICall, token]",{"range":"94","text":"95"},"Update the dependencies array to be: [fetchCart, getAddresses, getProducts, token]",{"range":"96","text":"97"},[1869,1871],"[fetchCart, performAPICall, token]",[7756,7758],"[fetchCart, getAddresses, getProducts, token]"]